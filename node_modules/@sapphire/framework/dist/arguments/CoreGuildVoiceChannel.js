'use strict';

var pieces = require('@sapphire/pieces');
var Identifiers_js = require('../lib/errors/Identifiers.js');
var guildVoiceChannel_js = require('../lib/resolvers/guildVoiceChannel.js');
var Argument_js = require('../lib/structures/Argument.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CoreArgument = class _CoreArgument extends Argument_js.Argument {
  constructor(context) {
    super(context, { name: "guildVoiceChannel" });
  }
  run(parameter, context) {
    const { guild } = context.message;
    if (!guild) {
      return this.error({
        parameter,
        identifier: Identifiers_js.Identifiers.ArgumentGuildChannelMissingGuildError,
        message: "This command can only be used in a server.",
        context
      });
    }
    const resolved = guildVoiceChannel_js.resolveGuildVoiceChannel(parameter, guild);
    return resolved.mapErrInto(
      (identifier) => this.error({
        parameter,
        identifier,
        message: "The given argument did not resolve to a valid voice channel.",
        context: { ...context, guild }
      })
    );
  }
};
__name(_CoreArgument, "CoreArgument");
var CoreArgument = _CoreArgument;
void pieces.container.stores.loadPiece({
  name: "guildVoiceChannel",
  piece: CoreArgument,
  store: "arguments"
});

exports.CoreArgument = CoreArgument;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreGuildVoiceChannel.js.map