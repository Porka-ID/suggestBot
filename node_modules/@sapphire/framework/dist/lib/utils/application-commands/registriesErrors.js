'use strict';

var pieces = require('@sapphire/pieces');
var Events_js = require('../../types/Events.js');
var registriesLog_js = require('./registriesLog.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function emitPerRegistryError(error, command) {
  const { name, location } = command;
  const { client, logger } = pieces.container;
  if (client.listenerCount(Events_js.Events.CommandApplicationCommandRegistryError)) {
    client.emit(Events_js.Events.CommandApplicationCommandRegistryError, error, command);
  } else {
    logger.error(
      `Encountered error while handling the command application command registry for command "${name}" at path "${location.full}"`,
      error
    );
  }
}
__name(emitPerRegistryError, "emitPerRegistryError");
function emitBulkOverwriteError(error, guildId) {
  const { client } = pieces.container;
  if (client.listenerCount(Events_js.Events.ApplicationCommandRegistriesBulkOverwriteError)) {
    client.emit(Events_js.Events.ApplicationCommandRegistriesBulkOverwriteError, error, guildId);
  } else if (guildId) {
    registriesLog_js.bulkOverwriteError(`Failed to overwrite guild application commands for guild ${guildId}`, error);
  } else {
    registriesLog_js.bulkOverwriteError(`Failed to overwrite global application commands`, error);
  }
}
__name(emitBulkOverwriteError, "emitBulkOverwriteError");

exports.emitBulkOverwriteError = emitBulkOverwriteError;
exports.emitPerRegistryError = emitPerRegistryError;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=registriesErrors.js.map