'use strict';

var Enums_js = require('../types/Enums.js');
var symbols_js = require('./symbols.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _PluginManager = class _PluginManager {
  constructor() {
    this.registry = /* @__PURE__ */ new Set();
  }
  registerHook(hook, type, name) {
    if (typeof hook !== "function")
      throw new TypeError(`The provided hook ${name ? `(${name}) ` : ""}is not a function`);
    this.registry.add({ hook, type, name });
    return this;
  }
  registerPreGenericsInitializationHook(hook, name) {
    return this.registerHook(hook, Enums_js.PluginHook.PreGenericsInitialization, name);
  }
  registerPreInitializationHook(hook, name) {
    return this.registerHook(hook, Enums_js.PluginHook.PreInitialization, name);
  }
  registerPostInitializationHook(hook, name) {
    return this.registerHook(hook, Enums_js.PluginHook.PostInitialization, name);
  }
  registerPreLoginHook(hook, name) {
    return this.registerHook(hook, Enums_js.PluginHook.PreLogin, name);
  }
  registerPostLoginHook(hook, name) {
    return this.registerHook(hook, Enums_js.PluginHook.PostLogin, name);
  }
  use(plugin) {
    const possibleSymbolHooks = [
      [symbols_js.preGenericsInitialization, Enums_js.PluginHook.PreGenericsInitialization],
      [symbols_js.preInitialization, Enums_js.PluginHook.PreInitialization],
      [symbols_js.postInitialization, Enums_js.PluginHook.PostInitialization],
      [symbols_js.preLogin, Enums_js.PluginHook.PreLogin],
      [symbols_js.postLogin, Enums_js.PluginHook.PostLogin]
    ];
    for (const [hookSymbol, hookType] of possibleSymbolHooks) {
      const hook = Reflect.get(plugin, hookSymbol);
      if (typeof hook !== "function")
        continue;
      this.registerHook(hook, hookType);
    }
    return this;
  }
  *values(hook) {
    for (const plugin of this.registry) {
      if (hook && plugin.type !== hook)
        continue;
      yield plugin;
    }
  }
};
__name(_PluginManager, "PluginManager");
var PluginManager = _PluginManager;

exports.PluginManager = PluginManager;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=PluginManager.js.map