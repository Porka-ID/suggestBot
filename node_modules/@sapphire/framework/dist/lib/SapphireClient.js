'use strict';

var pieces = require('@sapphire/pieces');
var discord_js = require('discord.js');
var _load_js = require('../optional-listeners/application-command-registries-listeners/_load.js');
var _load_js$1 = require('../optional-listeners/error-listeners/_load.js');
var _load_js$2 = require('../optional-listeners/message-command-listeners/_load.js');
var PluginManager_js = require('./plugins/PluginManager.js');
var ArgumentStore_js = require('./structures/ArgumentStore.js');
var CommandStore_js = require('./structures/CommandStore.js');
var InteractionHandlerStore_js = require('./structures/InteractionHandlerStore.js');
var ListenerStore_js = require('./structures/ListenerStore.js');
var PreconditionStore_js = require('./structures/PreconditionStore.js');
var Enums_js = require('./types/Enums.js');
var Events_js = require('./types/Events.js');
var ApplicationCommandRegistries_js = require('./utils/application-commands/ApplicationCommandRegistries.js');
var ILogger_js = require('./utils/logger/ILogger.js');
var Logger_js = require('./utils/logger/Logger.js');
require('../arguments/_load.js');
require('../listeners/_load.js');
require('../preconditions/_load.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
pieces.container.applicationCommandRegistries = { acquire: ApplicationCommandRegistries_js.acquire };
var _SapphireClient = class _SapphireClient extends discord_js.Client {
  constructor(options) {
    super(options);
    /**
     * The client's ID, used for the user prefix.
     * @since 1.0.0
     */
    this.id = null;
    pieces.container.client = this;
    for (const plugin of _SapphireClient.plugins.values(Enums_js.PluginHook.PreGenericsInitialization)) {
      plugin.hook.call(this, options);
      this.emit(Events_js.Events.PluginLoaded, plugin.type, plugin.name);
    }
    this.logger = options.logger?.instance ?? new Logger_js.Logger(options.logger?.level ?? ILogger_js.LogLevel.Info);
    pieces.container.logger = this.logger;
    if (options.enableLoaderTraceLoggings ?? pieces.container.logger.has(ILogger_js.LogLevel.Trace)) {
      pieces.Store.logger = pieces.container.logger.trace.bind(pieces.container.logger);
    }
    this.stores = pieces.container.stores;
    this.fetchPrefix = options.fetchPrefix ?? (() => this.options.defaultPrefix ?? null);
    this.disableMentionPrefix = options.disableMentionPrefix;
    for (const plugin of _SapphireClient.plugins.values(Enums_js.PluginHook.PreInitialization)) {
      plugin.hook.call(this, options);
      this.emit(Events_js.Events.PluginLoaded, plugin.type, plugin.name);
    }
    this.id = options.id ?? null;
    this.stores.register(new ArgumentStore_js.ArgumentStore()).register(new CommandStore_js.CommandStore()).register(new InteractionHandlerStore_js.InteractionHandlerStore()).register(new ListenerStore_js.ListenerStore()).register(new PreconditionStore_js.PreconditionStore());
    if (options.loadApplicationCommandRegistriesStatusListeners !== false) {
      _load_js.loadApplicationCommandRegistriesListeners();
    }
    if (options.loadDefaultErrorListeners !== false) {
      _load_js$1.loadErrorListeners();
    }
    if (options.loadMessageCommandListeners === true) {
      _load_js$2.loadMessageCommandListeners();
    }
    for (const plugin of _SapphireClient.plugins.values(Enums_js.PluginHook.PostInitialization)) {
      plugin.hook.call(this, options);
      this.emit(Events_js.Events.PluginLoaded, plugin.type, plugin.name);
    }
  }
  /**
   * Loads all pieces, then logs the client in, establishing a websocket connection to Discord.
   * @since 1.0.0
   * @param token Token of the account to log in with.
   * @return Token of the account used.
   */
  async login(token) {
    if (this.options.baseUserDirectory !== null) {
      this.stores.registerPath(this.options.baseUserDirectory);
    }
    for (const plugin of _SapphireClient.plugins.values(Enums_js.PluginHook.PreLogin)) {
      await plugin.hook.call(this, this.options);
      this.emit(Events_js.Events.PluginLoaded, plugin.type, plugin.name);
    }
    await Promise.all([...this.stores.values()].map((store) => store.loadAll()));
    const login = await super.login(token);
    for (const plugin of _SapphireClient.plugins.values(Enums_js.PluginHook.PostLogin)) {
      await plugin.hook.call(this, this.options);
      this.emit(Events_js.Events.PluginLoaded, plugin.type, plugin.name);
    }
    return login;
  }
  static use(plugin) {
    this.plugins.use(plugin);
    return this;
  }
};
__name(_SapphireClient, "SapphireClient");
_SapphireClient.plugins = new PluginManager_js.PluginManager();
var SapphireClient = _SapphireClient;

exports.SapphireClient = SapphireClient;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=SapphireClient.js.map