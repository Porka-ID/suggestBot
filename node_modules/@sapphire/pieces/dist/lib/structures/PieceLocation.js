"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PieceLocation = void 0;
const path_1 = require("path");
const constants_1 = require("../internal/constants");
/**
 * The metadata class used for {@link Piece}s.
 */
class PieceLocation {
    /**
     * @param full The full path to the file.
     * @param root The root directory the file was found from.
     */
    constructor(full, root) {
        /**
         * The full path to the file.
         */
        Object.defineProperty(this, "full", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The root directory the file was found from.
         */
        Object.defineProperty(this, "root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.full = full;
        this.root = root;
    }
    /**
     * Whether the file is virtual or not.
     */
    get virtual() {
        return this.full === constants_1.VirtualPath;
    }
    /**
     * The relative path between {@link PieceLocation.root} and {@link PieceLocation.full}.
     * @example
     * ```typescript
     * const location = new PieceLocation(
     * 	'/usr/src/app/commands',
     * 	'/usr/src/app/commands/general/ping.js'
     * );
     *
     * console.log(location.relative);
     * // → 'general/ping.js'
     * ```
     */
    get relative() {
        return this.virtual ? constants_1.VirtualPath : (0, path_1.relative)(this.root, this.full);
    }
    /**
     * The names of the directories that separate {@link PieceLocation.root} and {@link PieceLocation.full}.
     * @example
     * ```typescript
     * const location = new PieceLocation(
     * 	'/usr/src/app/commands',
     * 	'/usr/src/app/commands/games/multiplayer/connect-four.js'
     * );
     *
     * console.log(location.directories);
     * // → ['games', 'multiplayer']
     * ```
     */
    get directories() {
        return this.virtual ? [] : this.relative.split(path_1.sep).slice(0, -1);
    }
    /**
     * The name and extension of the file that was loaded, extracted from {@link PieceLocation.full}.
     * @example
     * ```typescript
     * const location = new PieceLocation(
     * 	'/usr/src/app/commands',
     * 	'/usr/src/app/commands/games/multiplayer/connect-four.js'
     * );
     *
     * console.log(location.name);
     * // → 'connect-four.js'
     * ```
     */
    get name() {
        return this.virtual ? constants_1.VirtualPath : (0, path_1.basename)(this.full);
    }
    /**
     * Defines the `JSON.stringify` behavior of this structure.
     */
    toJSON() {
        return {
            directories: this.directories,
            full: this.full,
            name: this.name,
            relative: this.relative,
            root: this.root
        };
    }
}
exports.PieceLocation = PieceLocation;
//# sourceMappingURL=PieceLocation.js.map